PROCEDURE "PROCEDURES_PROGRAMDELIVERYMETHODCREATE" ( 
    IN im_details "PROGRAMADMIN_PROGRAMDELIVERYMETHODVIEW",
	OUT ex_error "PROCEDURES_TT_ERRORS"  ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER AS
BEGIN
USING SQLSCRIPT_STRING AS LIB;
/***************************** 
 Write your procedure logic 
 *****************************/
declare lv_object_key		string;
declare lv_program_uuid		string;
declare lv_valid	 		string;
declare lv_programid		string;
declare lv_department_id	string;
declare lv_brand_id 		string;
declare lv_vendor_id 		string;
declare lv_category_id		string;
declare lv_dm_method_id		string;
declare lv_changed_by		string;
declare lv_count			integer; 

declare lv_count_en			integer default 0; 
declare lv_count_fr			integer default 0; 


declare lv_count_er			integer default 0; 
declare lv_count_cat		integer default 0; 
declare lv_count_ven		integer default 0; 
declare lv_batch_mode 		string;
declare lv_duplicated		boolean default false; 
declare lv_updateDesc		boolean default false; 
declare lv_error_codes		string;
declare lv_errorCodeArray	NVARCHAR(8) ARRAY;
declare lv_errorCodesLen	integer default 0; 
declare lv_tempStr			string; 
DECLARE i           		INTEGER      = 1;

select "OBJECT_KEY","PROGRAM_UUID","VALID","BATCH_MODE","ERROR_CODES","VENDOR_ID","CATEGORY_ID","DEL_METHOD","CHANGED_BY"
     into lv_object_key,lv_program_uuid,lv_valid,lv_batch_mode,lv_error_codes,lv_vendor_id,lv_category_id,lv_dm_method_id,lv_changed_by
     from :im_details; 

if :lv_program_uuid = '' then
  ex_error = select 552 as http_status_code, 
               'The Program UUID is empty' as error_message, 
                     'The program uuid field can not be my empty' as detail from "DUMMY";
else

  /***************************** 
	check the keys
  *****************************/
  select count(*) into lv_count from "PROGRAMADMIN_PROG_DEL_METHOD" where PROGRAM_UUID = :lv_program_uuid AND VENDOR_ID = :lv_vendor_id	AND DEL_METHOD = :lv_dm_method_id AND CATEGORY_ID = :lv_category_id;

  if lv_count > 0 then
	lv_duplicated := true;
  end if; 

  if :lv_batch_mode = 'X' then
  	if :lv_valid <> 'X' THEN 
      if :lv_error_codes is not NULL then 
	    lv_errorCodeArray := LIB:SPLIT_TO_ARRAY(:lv_error_codes,',');
        FOR i IN 1..CARDINALITY(:lv_errorCodeArray) DO
		  lv_tempStr := :lv_errorCodeArray[:i];
		  select count(*) into lv_count_er  from "CORE_OBJECT_MESSAGE" where OBJECT_KEY = lv_object_key AND ERROR_CODE = :lv_tempStr;
		  if :lv_count_er < 1 then
			insert into "CORE_OBJECT_MESSAGE" ("OBJECT_KEY","ERROR_CODE","AUDIT_CREATED_ON","AUDIT_CREATED_BY","AUDIT_CHANGED_ON","AUDIT_CHANGED_BY")
	          values(lv_object_key,lv_tempStr,CURRENT_TIMESTAMP,lv_changed_by,CURRENT_TIMESTAMP,lv_changed_by);
		  end if;
		END FOR;		
	  end if;    	
	end if;

--  check the category 
	select count(*) into lv_count_cat from "PROGRAMADMIN_PROG_CATEGORY" where PROGRAM_UUID = :lv_program_uuid AND CATEGORY_ID = :lv_category_id;
    if :lv_count_cat < 1  then
	  insert into "CORE_OBJECT_MESSAGE" ("OBJECT_KEY","ERROR_CODE","AUDIT_CREATED_ON","AUDIT_CREATED_BY","AUDIT_CHANGED_ON","AUDIT_CHANGED_BY")
	    values(lv_object_key,'BP01026',CURRENT_TIMESTAMP,lv_changed_by,CURRENT_TIMESTAMP,lv_changed_by);
	  --- the check is failed  
	  lv_valid := '';
	  ----- add the item for integrety, will handle it later on 
	  --select count(*) into lv_count_en  from "PROGRAMADMIN_CATEGORY_NAME" where LANGUAGE_KEY = 'EN' AND CATEGORY_ID = :lv_category_id;
	
	  --if lv_count_en < 1 then
	  --  insert into "PROGRAMADMIN_CATEGORY_NAME" 
   --        values(lv_category_id,'EN',lv_category_id,CURRENT_TIMESTAMP,lv_changed_by,CURRENT_TIMESTAMP,lv_changed_by);
	  --end if;

	  --select count(*) into lv_count_fr  from "PROGRAMADMIN_CATEGORY_NAME" where LANGUAGE_KEY = 'FR' AND CATEGORY_ID = :lv_category_id;
	  --if lv_count_fr < 1 then
	  --  insert into "PROGRAMADMIN_CATEGORY_NAME" 
   --        values(lv_category_id,'FR',lv_category_id,CURRENT_TIMESTAMP,lv_changed_by,CURRENT_TIMESTAMP,lv_changed_by);
	  --end if;
	  
	end if;

--  check the vendor 
	select count(*) into lv_count_ven from "PROGRAMADMIN_PROG_VENDOR" where PROGRAM_UUID = :lv_program_uuid AND VENDOR_ID = :lv_vendor_id;
    if :lv_count_ven < 1  then
	  insert into "CORE_OBJECT_MESSAGE" ("OBJECT_KEY","ERROR_CODE","AUDIT_CREATED_ON","AUDIT_CREATED_BY","AUDIT_CHANGED_ON","AUDIT_CHANGED_BY")
	    values(lv_object_key,'BP01035',CURRENT_TIMESTAMP,lv_changed_by,CURRENT_TIMESTAMP,lv_changed_by);
	  --- the check is failed  
	  lv_valid := '';
	end if;

--  check the delivery method 
	select count(*) into lv_count_cat from "PROGRAMADMIN_PROG_VENDOR" where PROGRAM_UUID = :lv_program_uuid AND VENDOR_ID = :lv_dm_method_id;
    if :lv_count_cat < 1  then
		select count(*) into lv_count_cat from "PROGRAMADMIN_DELIVERYMETHODNAMESVIEW" where DEL_METHOD = :lv_dm_method_id;
	    if :lv_count_cat < 1  then
		  insert into "CORE_OBJECT_MESSAGE" ("OBJECT_KEY","ERROR_CODE","AUDIT_CREATED_ON","AUDIT_CREATED_BY","AUDIT_CHANGED_ON","AUDIT_CHANGED_BY")
	        values(lv_object_key,'BP01053',CURRENT_TIMESTAMP,lv_changed_by,CURRENT_TIMESTAMP,lv_changed_by);
	  --- the check is failed  
	        lv_valid := '';
	    end if;  
	end if;

    insert into "PROGRAMADMIN_PROG_DEL_METHOD" ("OBJECT_KEY","PROGRAM_UUID","VENDOR_ID","CATEGORY_ID","DEL_METHOD","VALID","AUDIT_CREATED_ON","AUDIT_CREATED_BY","AUDIT_CHANGED_ON","AUDIT_CHANGED_BY")
	  values(lv_object_key,lv_program_uuid,lv_vendor_id,lv_category_id,lv_dm_method_id,lv_valid,CURRENT_TIMESTAMP,lv_changed_by,CURRENT_TIMESTAMP,lv_changed_by);
	
  else 
    if lv_duplicated = true then
	  ex_error = select 551 as http_status_code, 
        'The Record already exist' as error_message, 
        'The Record already exist, can not insert' as detail from "DUMMY";
    else
	  lv_valid := 'X';
      insert into "PROGRAMADMIN_PROG_DEL_METHOD" ("OBJECT_KEY","PROGRAM_UUID","VENDOR_ID","CATEGORY_ID","DEL_METHOD","VALID","AUDIT_CREATED_ON","AUDIT_CREATED_BY","AUDIT_CHANGED_ON","AUDIT_CHANGED_BY")
	    values(lv_object_key,lv_program_uuid,lv_vendor_id,lv_category_id,lv_dm_method_id,lv_valid,CURRENT_TIMESTAMP,lv_changed_by,CURRENT_TIMESTAMP,lv_changed_by);
    end if;
  end if;
end if;

END;
