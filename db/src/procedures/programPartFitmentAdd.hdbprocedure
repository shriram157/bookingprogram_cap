PROCEDURE "PROCEDURES_PROGRAMPARTFITMENTADD" ( 
    IN im_program_uuid NVARCHAR(36),
    IN im_partId       NVARCHAR(40),
    IN im_modelCode    NVARCHAR(7),
    IN im_seriesCode   NVARCHAR(3),
    IN im_en_desc      NVARCHAR(100),
    IN im_fr_desc      NVARCHAR(100),
    IN im_en_seriesdesc 	NVARCHAR(100),
    IN im_fr_seriesdesc 	NVARCHAR(100),
    IN im_modelYear    NVARCHAR(4),
    IN im_brand        NVARCHAR(2),
    IN im_brandName    NVARCHAR(10),
    IN im_errors       NVARCHAR(100),
    IN im_user         NVARCHAR(36),
    IN im_invalid 	   BOOLEAN,
	OUT ex_code       INT   ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER AS
BEGIN
USING SQLSCRIPT_STRING AS LIB;
/***************************** 
 Write your procedure logic 
 *****************************/
declare lv_count_pg			integer default 0; 
declare lv_count			integer default 0; 
declare lv_count_part		integer default 0; 
declare lv_count_part_dup	integer default 0; 

declare lv_object_key 		string; 
declare lv_duplicated		boolean default false;
declare lv_valid	 		string;

declare lv_errorCodeArray	NVARCHAR(8) ARRAY;
declare lv_errorCodesLen	integer default 0; 
declare lv_tempStr			string; 
DECLARE i           		INTEGER      = 1;
DECLARE rc_code        		INTEGER      = 0;

--- check the prorgam is existing, otherwise do nothing 
if  :im_program_uuid is not null then
  select count(*) into lv_count_pg from "PROGRAMADMIN_BOOKING_PROGRAM" where PROGRAM_UUID = :im_program_uuid;
end if;

--- only do if the program is exist 
if lv_count_pg > 0 then 
  --- first, get the uuid
  select to_nvarchar(SYSUUID) into lv_object_key from "DUMMY";

  --- get the error codes
  if :im_invalid = true then 
	lv_valid := '';
	if :im_errors is not NULL then 
      lv_errorCodeArray := LIB:SPLIT_TO_ARRAY(:im_errors,',');

      FOR i IN 1..CARDINALITY(:lv_errorCodeArray) DO

        lv_tempStr := :lv_errorCodeArray[:i];
	    if :lv_tempStr = 'BP01074' then 
			lv_duplicated := true;
        end if;
      
        --- as the uuid should be unique all the way, but all way using the upsert for possible duplication
	    upsert "CORE_OBJECT_MESSAGE" ("OBJECT_KEY","ERROR_CODE","AUDIT_CREATED_ON","AUDIT_CREATED_BY","AUDIT_CHANGED_ON","AUDIT_CHANGED_BY")
	      values(lv_object_key,lv_tempStr,CURRENT_TIMESTAMP,im_user,CURRENT_TIMESTAMP,im_user) where OBJECT_KEY = :lv_object_key AND ERROR_CODE = :lv_tempStr;
	    
      END FOR;		

	end if;
  else
    lv_valid := 'X';
  end if;   --commented harish

--  check the part is exist or not. part is invalid
 select count(*) into lv_count_part from "PROGRAMADMIN_PROG_PARTS" where PROGRAM_UUID = :im_program_uuid AND PART_NUM = :im_partId  AND "VALID" = 'X';
 if :lv_count_part < 1  then
	  insert into "CORE_OBJECT_MESSAGE" ("OBJECT_KEY","ERROR_CODE","AUDIT_CREATED_ON","AUDIT_CREATED_BY","AUDIT_CHANGED_ON","AUDIT_CHANGED_BY")
	    values(lv_object_key,'BP01045',CURRENT_TIMESTAMP,im_user,CURRENT_TIMESTAMP,im_user);
	  --- the check is failed  
	  lv_valid := '';
end if;
select count(*) into lv_count_part_dup from "PROGRAMADMIN_PROG_PART_FITMENT" where PROGRAM_UUID = :im_program_uuid AND PART_NUM = :im_partId and MODEL_CODE = :im_modelCode and SERIES_CODE = :im_seriesCode and YEAR = :im_modelYear;
 if :lv_count_part_dup < 1 then
  insert into "PROGRAMADMIN_PROG_PART_FITMENT" ("OBJECT_KEY","PROGRAM_UUID","PART_NUM","MODEL_CODE","SERIES_CODE","YEAR","VALID","AUDIT_CREATED_ON","AUDIT_CREATED_BY","AUDIT_CHANGED_ON","AUDIT_CHANGED_BY")
    values(lv_object_key,im_program_uuid,im_partId,im_modelCode,im_seriesCode,im_modelYear,lv_valid,CURRENT_TIMESTAMP,im_user,CURRENT_TIMESTAMP,im_user);

  if :lv_valid = 'X' AND :lv_duplicated = false then 

	upsert "PROGRAMADMIN_VEHICLE_MODEL" ("MODEL_CODE","BRAND","BRAND_NAME","AUDIT_CREATED_ON","AUDIT_CREATED_BY","AUDIT_CHANGED_ON","AUDIT_CHANGED_BY")
	  values(:im_modelCode,:im_brand,:im_brandName,CURRENT_TIMESTAMP,:im_user,CURRENT_TIMESTAMP,:im_user) where MODEL_CODE = :im_modelCode;

	upsert "PROGRAMADMIN_MODEL_NAME" ("MODEL_CODE","SERIES_CODE","LANGUAGE_KEY","MODEL_DESC","AUDIT_CREATED_ON","AUDIT_CREATED_BY","AUDIT_CHANGED_ON","AUDIT_CHANGED_BY")
           values(im_modelCode,im_seriesCode,'EN',im_en_desc,CURRENT_TIMESTAMP,im_user,CURRENT_TIMESTAMP,im_user) where MODEL_CODE = :im_modelCode  AND LANGUAGE_KEY = 'EN';

	upsert "PROGRAMADMIN_MODEL_NAME" ("MODEL_CODE","SERIES_CODE","LANGUAGE_KEY","MODEL_DESC","AUDIT_CREATED_ON","AUDIT_CREATED_BY","AUDIT_CHANGED_ON","AUDIT_CHANGED_BY")
           values(im_modelCode,im_seriesCode,'FR',im_en_desc,CURRENT_TIMESTAMP,im_user,CURRENT_TIMESTAMP,im_user) where MODEL_CODE = :im_modelCode  AND LANGUAGE_KEY = 'FR';
    
    upsert "PROGRAMADMIN_TCISERIES" ("SERIES_CODE","LANGUAGE_KEY","SERIES_DESC","AUDIT_CREATED_ON","AUDIT_CREATED_BY","AUDIT_CHANGED_ON","AUDIT_CHANGED_BY")
           values(im_seriesCode,'EN',im_en_seriesdesc,CURRENT_TIMESTAMP,im_user,CURRENT_TIMESTAMP,im_user) where SERIES_CODE = :im_seriesCode  AND LANGUAGE_KEY = 'EN';

	upsert "PROGRAMADMIN_TCISERIES" ("SERIES_CODE","LANGUAGE_KEY","SERIES_DESC","AUDIT_CREATED_ON","AUDIT_CREATED_BY","AUDIT_CHANGED_ON","AUDIT_CHANGED_BY")
           values(im_seriesCode,'FR',im_fr_seriesdesc,CURRENT_TIMESTAMP,im_user,CURRENT_TIMESTAMP,im_user) where SERIES_CODE = :im_seriesCode  AND LANGUAGE_KEY = 'FR';
	
  end if;
end if;
end if; 

ex_code := 0;

END;
